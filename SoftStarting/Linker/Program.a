;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/27/2022
;Author  : Herlambang
;Company : Anugrah
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;/*Library Header*/
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdbool.h>
;#include <math.h>
;
;/*Inisialisasi Parameter*/
;#define ADC_VREF_TYPE 0x40
;#define Returning 100
;#define ACInput 232
;#define DCRef 4.96
;#define MaxSpeed 200
;#define ditekan 0
;
;#define ADC_SCALE 1023.0
;#define VREF 5.0
;#define DEFAULT_FREQUENCY 50
;int zero = 512;
;float sensitivity = 0.066;

	.DSEG
;
;/*Inisialisasi Pinout*/
;#define ZeroCross PINB.2
;#define startt PINC.3
;
;/*Inisialisasi Variabel */
;char temp;
;volatile unsigned long millis_value; /*Inisialisasi untuk counter tik untuk millis*/
;char keyupdate = '0', lastkeyupdate = '0';/*Inisialisasi variabel keypad*/
;bool tekan = false;
;float Kp = 0.0, Ki = 0.0;
;int Arus = 0;  /*Inisialisasi PI Parameters*/
;unsigned char countpwm = 0;
;
;/*fungsi untuk cek interrupt zero crossing*/
;void Cek_Interrupt() {
; 0000 0041 void Cek_Interrupt() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0042     char i;
; 0000 0043 
; 0000 0044     /*Filter untuk memastikan bukan noise*/
; 0000 0045     for (temp = 0;temp < 5;) { /*pengecekan 5x*/
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0046             if(!ZeroCross)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0047             { temp++; }
;PCODE: $00000019 VOL: 0
; 0000 0048             else { temp = Returning; }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0049     }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004A 
; 0000 004B     if(temp != Returning) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004C         /*Proses ketika zero crossing, PWM dikeluarkan*/
; 0000 004D         OCR2 = countpwm; /*PWM diaktifkan*/
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004E         for(i=0x2F;i>0;i--); /*PWM dijeda*/
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004F         OCR2 = 0;/*PWM di nol kan*/
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0050       }
; 0000 0051 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0055 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0056 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000003D VOL: 0
;	adc_input -> Y+0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057 // Delay needed for the stabilization of the ADC input voltage
; 0000 0058 delay_us(10);
;PCODE: $00000041 VOL: 0
; 0000 0059 // Start the AD conversion
; 0000 005A ADCSRA|=0x40;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005B // Wait for the AD conversion to complete
; 0000 005C while ((ADCSRA & 0x10)==0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005D ADCSRA|=0x10;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005E return ADCW;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005F }
;PCODE: $0000004F VOL: 0
;
;/*Interrupt untuk tik millis*/
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0063 {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0064 // Place your code here
; 0000 0065     millis_value++;
;PCODE: $00000052 VOL: 1
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0066 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;/*Interrupt untuk cek zero crossing*/
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 006A {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006B // Place your code here
; 0000 006C //    Cek_Interrupt();
; 0000 006D }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;// Declare your global variables here
;/*Inisialisasi Variabel millis*/
;volatile unsigned long lastmillis_value;
;
;/*Fungsi untuk variabel millis*/
;unsigned long millis() {
; 0000 0074 unsigned long millis() {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0075     unsigned long m;
; 0000 0076     #asm("cli")
;PCODE: $00000060 VOL: 0
;	m -> Y+0
;PCODE: $00000061 VOL: 0
	cli
;PCODE: $00000062 VOL: 0
; 0000 0077     m = millis_value;
;PCODE: $00000063 VOL: 1
;PCODE: $00000064 VOL: 0
; 0000 0078     #asm("sei")
;PCODE: $00000065 VOL: 0
	sei
;PCODE: $00000066 VOL: 0
; 0000 0079     return m;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007A }
;PCODE: $0000006A VOL: 0
;
;/*Inisialisasi Variabel Keypad*/
;unsigned long lastDebounceTime = 0;
;#define debounceDelay  100
;#define aktif    0
;#define nonaktif 1
;/*Fungsi cek penekanan keypad*/
;char keypad() {
; 0000 0082 char keypad() {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0083     char out = '\0';
; 0000 0084 
; 0000 0085     if((millis() - lastDebounceTime) > debounceDelay) { // Jika ada penekanan keypad
;PCODE: $0000006D VOL: 0
;	out -> R17
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0086         lastDebounceTime = millis();
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0087 
; 0000 0088         PORTA.7=aktif;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0089         PORTA.6=nonaktif;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 008A         PORTA.5=nonaktif;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008B         PORTA.4=nonaktif;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008C         delay_ms(20);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008D         if (PINA.3==aktif) { lastDebounceTime = millis(); tekan = true; out = '1'; }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 008E         if (PINA.2==aktif) { lastDebounceTime = millis(); tekan = true; out = '2'; }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008F         if (PINA.1==aktif) { lastDebounceTime = millis(); tekan = true; out = '3'; }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0090 
; 0000 0091         PORTA.7=nonaktif;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0092         PORTA.6=aktif;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0093         PORTA.5=nonaktif;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0094         PORTA.4=nonaktif;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0095         delay_ms(20);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0096         if (PINA.3==aktif) { lastDebounceTime = millis(); tekan = true; out = '4'; }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0097         if (PINA.2==aktif) { lastDebounceTime = millis(); tekan = true; out = '5'; }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0098         if (PINA.1==aktif) { lastDebounceTime = millis(); tekan = true; out = '6'; }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0099 
; 0000 009A         PORTA.7=nonaktif;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 009B         PORTA.6=nonaktif;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 009C         PORTA.5=aktif;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 009D         PORTA.4=nonaktif;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 009E         delay_ms(20);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 009F         if (PINA.3==aktif) { lastDebounceTime = millis(); tekan = true; out = '7'; }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A0         if (PINA.2==aktif) { lastDebounceTime = millis(); tekan = true; out = '8'; }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00A1         if (PINA.1==aktif) { lastDebounceTime = millis(); tekan = true; out = '9'; }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00A2 
; 0000 00A3         PORTA.7=nonaktif;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00A4         PORTA.6=nonaktif;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00A5         PORTA.5=nonaktif;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A6         PORTA.4=aktif;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00A7         delay_ms(20);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00A8         if (PINA.3==aktif) { lastDebounceTime = millis(); tekan = true; out = '*'; }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00A9         if (PINA.2==aktif) { lastDebounceTime = millis(); tekan = true; out = '0'; }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00AA         if (PINA.1==aktif) { lastDebounceTime = millis(); tekan = true; out = '#'; }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00AB 
; 0000 00AC         PORTA.6=nonaktif;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00AD         PORTA.5=nonaktif;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00AE         PORTA.4=nonaktif;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00AF         PORTA.7=nonaktif;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00B0         delay_ms(20);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00B1 
; 0000 00B2 //        tekan = true;
; 0000 00B3         return out;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00B4      }
; 0000 00B5 }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;/*Fungsi untuk menghitung watt*/
;float CalcWatt(float input) {
; 0000 00B8 float CalcWatt(float input) {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00B9     float watt;
; 0000 00BA     watt = ACInput * input;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;	input -> Y+4
;	watt -> Y+0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00BB     return watt;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00BC }
;PCODE: $00000139 VOL: 0
;
;int calibrate() {
; 0000 00BE int calibrate() {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00BF 	int acc = 0;
; 0000 00C0     int i = 0;
; 0000 00C1 	for (i = 0; i < 10; i++) {
;PCODE: $0000013C VOL: 0
;	acc -> R16,R17
;	i -> R18,R19
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00C2 		acc += read_adc(0);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00C3 	}
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00C4 	zero = acc / 10;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00C5 	return zero;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00C6 }
;PCODE: $0000015B VOL: 0
;
;/*Inisialisasi Variabel Sensor arus*/
;int acscount = 0;
;#define maxacscount 20
;
;/*Fungsi untuk membaca sensor arus ACS*/
;float readACS() {
; 0000 00CD float readACS() {
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00CE     float adc_volt;
; 0000 00CF //    float amp = 0;
; 0000 00D0 //    float temps;
; 0000 00D1 
; 0000 00D2 	int acc = 0;
; 0000 00D3     int i = 0;
; 0000 00D4 	for (i = 0; i < 10; i++) {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;	adc_volt -> Y+4
;	acc -> R16,R17
;	i -> R18,R19
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00D5 		acc += read_adc(0) - zero;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00D6 	}
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00D7 	adc_volt = (float)acc / 10.0 / ADC_SCALE * VREF / sensitivity;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00D8 
; 0000 00D9 //    for (acscount = 0; acscount < maxacscount; acscount++) { amp += read_adc(0); } // Sampling pembacaan sensor sebanyak 20x
; 0000 00DA //    amp /= maxacscount;
; 0000 00DB //    temps = amp *(DCRef/1023);
; 0000 00DC //    adc_volt = fabs(temps-(DCRef/2))/0.066; //0.066 di dapat dari data sheet
; 0000 00DD 
; 0000 00DE     return adc_volt;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00DF }
;PCODE: $00000189 VOL: 0
;
;/*Inisialisasi Variabel Sensor arus*/
;float arus1, vout1;
;int adc1, count, dataMin, dataMax;
;
;/*Fungsi membaca sensor arus ACS dengan nilai tertinggi saja*/
;unsigned char readACSMAX() {
; 0000 00E6 unsigned char readACSMAX() {
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00E7     for ( count = 0; count <= 1000; count++) { // sampling pembacaan sensor arus sebanyak 1000x
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00E8         adc1 = read_adc(0);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00E9         if ( adc1 >= dataMax ) dataMax = adc1;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00EA         if ( adc1 <= dataMin ) dataMin = adc1;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00EB         delay_ms(1);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00EC     }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00ED     vout1 = dataMax*(DCRef/1023);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00EE     arus1 = fabs(vout1-(DCRef/2))/0.066;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00EF 
; 0000 00F0     return arus1;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00F1 }
;PCODE: $000001C3 VOL: 0
;
;int prev_res=0, prev_err_1=0, prev_err_2=0, total_err=0;  // PI Control Variables
;/*Fungsi untuk perhitungan PI*/
;void PIControl(unsigned int sensor_val) {
; 0000 00F5 void PIControl(unsigned int sensor_val) {
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00F6 //    unsigned char data[16];
; 0000 00F7     int motor_res,err_func;
; 0000 00F8     float KonstP;
; 0000 00F9     long KonstI;
; 0000 00FA     long cont_res;
; 0000 00FB     err_func = Arus - sensor_val; //  Get the Error Function
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;	sensor_val -> Y+16
;	motor_res -> R16,R17
;	err_func -> R18,R19
;	KonstP -> Y+12
;	KonstI -> Y+8
;	cont_res -> Y+4
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 00FC     KonstP = Kp * (err_func); //Kp;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00FD     KonstI = Ki * (err_func + total_err); //Ki;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00FE     // Menghitung output dari nilai KP dan KI
; 0000 00FF 
; 0000 0100     cont_res=(float)(prev_res + KonstP + KonstI);
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0101 
; 0000 0102     // Membatasi output kecepatan motor
; 0000 0103     motor_res=(int)cont_res;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0104     if (motor_res > MaxSpeed) motor_res = MaxSpeed;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0105     if (motor_res < 0) motor_res = 0;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0106 
; 0000 0107 
; 0000 0108     // Menyimpan nilai error function terbaru
; 0000 0109     prev_res=motor_res;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 010A     prev_err_2=prev_err_1;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 010B     prev_err_1=err_func;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 010C     total_err+=err_func;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 010D     countpwm-=motor_res;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 010E 
; 0000 010F //    lcd_gotoxy(0,0); lcd_puts("         ");
; 0000 0110 //    lcd_gotoxy(0,0); sprintf(data, "R: %d", motor_res); lcd_puts(data);
; 0000 0111 //    lcd_gotoxy(0,1); lcd_puts("         ");
; 0000 0112 //    lcd_gotoxy(0,1); sprintf(data, "A: %d", sensor_val); lcd_puts(data);
; 0000 0113 }
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;
;/*Inisialisasi Variabel untuk update nilai parameter*/
;int buttonstate = 0;
;int lastbuttonstate = 0;
;int pos = 0;
;bool pressed = false;
;bool blink = false;
;bool koma = false;
;char savedkey = '0';

	.DSEG
;unsigned char data[16];
;volatile unsigned long millis_cek;
;char Kp_Temp[];
;char Ki_Temp[];
;char Arus_Temp[5];
;/*Fungsi untuk set parameter*/
;void SetParameter() {
; 0000 0123 void SetParameter() {

	.CSEG
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0124 /*Update nilai arus*/
; 0000 0125     lcd_clear();
;PCODE: $00000204 VOL: 0
; 0000 0126     memset(Arus_Temp, 0, sizeof(Arus_Temp));
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0127     lcd_gotoxy(0,0); lcd_putsf("SET I  :      mA");
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0128     lcd_gotoxy(0,1); lcd_putsf("*:,"); lcd_gotoxy(11,1); lcd_putsf("#:Clr");
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0129     lastkeyupdate = '\0';
;PCODE: $00000221 VOL: 0
; 0000 012A     keyupdate = '\0';
;PCODE: $00000222 VOL: 0
; 0000 012B     pos = 9;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 012C     // looping set nilai arus motor
; 0000 012D     do {
;PCODE: $00000225 VOL: 0
; 0000 012E         if(millis() - millis_cek >= 50) {
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 1
;PCODE: $00000228 VOL: 1
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 012F             millis_cek = millis();
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 1
; 0000 0130             keyupdate = keypad();
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0131             if(tekan == true) { // Jika ada penekanan keypad
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0132                 if(pos < 13) {
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0133                     if((keyupdate >= 48) && (keyupdate <= 57)) {
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0134                         lastkeyupdate = keyupdate;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0135                         savedkey = keyupdate;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0136                         lcd_gotoxy(pos,0); lcd_putchar(savedkey);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0137                         Arus_Temp[pos-9] = savedkey;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0138 //                        if(keyupdate == '*') { lcd_gotoxy(pos,0); lcd_putchar(','); }
; 0000 0139                         pos++;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 013A                     }
; 0000 013B                 }
;PCODE: $00000253 VOL: 0
; 0000 013C                 if(keyupdate == '#') {
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 013D                     memset(Arus_Temp, 0, sizeof(Arus_Temp));
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 013E                     lcd_gotoxy(9,0); lcd_puts("     mA");
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 013F                     pos = 9;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0140                 }
; 0000 0141                 tekan = false;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0142             }
; 0000 0143         }
;PCODE: $0000026A VOL: 0
; 0000 0144 
; 0000 0145         if(millis() - lastmillis_value >= 500) { // Untuk membuat kursor '_' berkedip
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 1
;PCODE: $0000026E VOL: 1
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0146             lastmillis_value = millis();
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 1
; 0000 0147             if(pos < 13) {
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0148                 if(blink) { lcd_gotoxy(pos,0); lcd_putchar(' '); }
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0149                 else { lcd_gotoxy(pos,0); lcd_putchar('_'); }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 014A                 blink = !blink;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 014B             }
; 0000 014C         }
;PCODE: $0000028C VOL: 0
; 0000 014D 
; 0000 014E         buttonstate = startt;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 014F         if (buttonstate != lastbuttonstate) { // Jika yang ditekan tombol start, maka keluar dari loop
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0150             if (startt == ditekan) { pressed = true; }
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0151         }
;PCODE: $0000029B VOL: 0
; 0000 0152         lastbuttonstate = buttonstate;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0153     } while(pressed == false);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0154     pressed = false;
;PCODE: $000002A4 VOL: 0
; 0000 0155     Arus = atoi(Arus_Temp);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0156     lcd_clear();
;PCODE: $000002A8 VOL: 0
; 0000 0157     lcd_gotoxy(0,0); lcd_putsf("ARUS = ");
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0158     lcd_gotoxy(8,0); sprintf(data, "%d mA", Arus); lcd_puts(data);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0159     memset(Arus_Temp, 0, sizeof(Arus_Temp));
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 015A     delay_ms(2000);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 015B 
; 0000 015C /*Update nilai Kp*/
; 0000 015D     koma = false;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 015E     memset(Kp_Temp, 0, sizeof(Kp_Temp));
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 015F     lcd_clear();
;PCODE: $000002D4 VOL: 0
; 0000 0160     lcd_gotoxy(0,0); lcd_putsf("SET Kp : ");
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0161     lcd_gotoxy(0,1); lcd_putsf("*:,"); lcd_gotoxy(11,1); lcd_putsf("#:Clr");
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0162     lastkeyupdate = '\0';
;PCODE: $000002EA VOL: 0
; 0000 0163     keyupdate = '\0';
;PCODE: $000002EB VOL: 0
; 0000 0164     savedkey = '0';
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0165     pos = 9;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0166 // looping set nilai Kp
; 0000 0167     do {
;PCODE: $000002F0 VOL: 0
; 0000 0168         if(millis() - millis_cek >= 50) {
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 1
;PCODE: $000002F3 VOL: 1
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0169             millis_cek = millis();
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 1
; 0000 016A             keyupdate = keypad();
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 016B             if(tekan == true) { // Jika ada penekanan keypad
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 016C                 if(pos < 13) {
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 016D                     if((keyupdate >= 48) && (keyupdate <= 57)) {
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 016E                         lastkeyupdate = keyupdate;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 016F                         savedkey = keyupdate;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 0170                     }
; 0000 0171                     else if((keyupdate == '*') && (koma == false)) {
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0172                         koma = true;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0173                         savedkey = '.';
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0174                     }
; 0000 0175                     lcd_gotoxy(pos,0); lcd_putchar(savedkey);
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 0176                     Kp_Temp[pos-9] = savedkey;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 0177                     pos++;
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 0178                 }
; 0000 0179 
; 0000 017A                 if(keyupdate == '#') {
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 017B                     memset(Kp_Temp, 0, sizeof(Kp_Temp));
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 017C                     koma = false;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 017D                     lcd_gotoxy(9,0); lcd_puts("       ");
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 017E                     pos = 9;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 017F                 }
; 0000 0180                 tekan = false;
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0181             }
; 0000 0182         }
;PCODE: $00000348 VOL: 0
; 0000 0183 
; 0000 0184         if(millis() - lastmillis_value >= 500) { // Untuk membuat kursor '_' berkedip
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 1
;PCODE: $0000034C VOL: 1
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 0185             lastmillis_value = millis();
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 1
; 0000 0186             if(pos < 13) {
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0187                 if(blink) { lcd_gotoxy(pos,0); lcd_putchar(' '); }
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0188                 else { lcd_gotoxy(pos,0); lcd_putchar('_'); }
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0189                 blink = !blink;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 018A             }
; 0000 018B         }
;PCODE: $0000036A VOL: 0
; 0000 018C 
; 0000 018D         buttonstate = startt;
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 018E         if (buttonstate != lastbuttonstate) { // Jika yang ditekan tombol start, maka keluar dari loop
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 018F             if (startt == ditekan) {
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 0190                 pressed = true;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0191             }
; 0000 0192         }
;PCODE: $00000379 VOL: 0
; 0000 0193         lastbuttonstate = buttonstate;
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0194     } while(pressed == false);
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0195     pressed = false;
;PCODE: $00000382 VOL: 0
; 0000 0196     Kp = atof(Kp_Temp);
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0197     lcd_clear();
;PCODE: $00000386 VOL: 0
; 0000 0198     lcd_gotoxy(0,0); lcd_putsf("  Kp = ");
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0199     lcd_gotoxy(8,0); sprintf(data, "%0.2f", Kp); lcd_puts(data);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 019A     lcd_gotoxy(8,1); lcd_puts(Kp_Temp);
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 019B     memset(Kp_Temp, 0, sizeof(Kp_Temp));
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 019C     delay_ms(2000);
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 019D 
; 0000 019E /*Update nilai Ki*/
; 0000 019F     koma = false;
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 01A0     memset(Ki_Temp, 0, sizeof(Ki_Temp));
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 01A1     lcd_clear();
;PCODE: $000003B7 VOL: 0
; 0000 01A2     lcd_gotoxy(0,0); lcd_putsf("SET Ki : ");
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0000 01A3     lcd_gotoxy(0,1); lcd_putsf("*:,"); lcd_gotoxy(11,1); lcd_putsf("#:Clr");
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 01A4     lastkeyupdate = '\0';
;PCODE: $000003CD VOL: 0
; 0000 01A5     keyupdate = '\0';
;PCODE: $000003CE VOL: 0
; 0000 01A6     pos = 9;
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 01A7 // looping set nilai Kp
; 0000 01A8     do {
;PCODE: $000003D1 VOL: 0
; 0000 01A9         if(millis() - millis_cek >= 250) {
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 1
;PCODE: $000003D4 VOL: 1
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 01AA             millis_cek = millis();
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 1
; 0000 01AB             keyupdate = keypad();
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 01AC             if(tekan == true) { // Jika ada penekanan keypad
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 01AD                 if(pos < 14) {
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 01AE                     if((keyupdate >= 48) && (keyupdate <= 57)) {
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0000 01AF                         lastkeyupdate = keyupdate;
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 01B0                         savedkey = keyupdate;
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 01B1                         lcd_gotoxy(pos,0); lcd_putchar(savedkey);
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 01B2                     }
; 0000 01B3                     else if((keyupdate == '*') && (koma == false)) {
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 01B4                         koma = true;
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 01B5                         savedkey = '.';
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 01B6                         lcd_gotoxy(pos,0); lcd_putchar(savedkey);
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 01B7                     }
; 0000 01B8                     Ki_Temp[pos-9] = savedkey;
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 01B9                     pos++;
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 01BA                 }
; 0000 01BB 
; 0000 01BC                 if(keyupdate == '#') {
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 01BD                     koma = false;
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 01BE                     memset(Ki_Temp, 0, sizeof(Ki_Temp));
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 01BF                     lcd_gotoxy(9,0); lcd_puts("       ");
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 01C0                     pos = 9;
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 01C1                 }
; 0000 01C2                 tekan = false;
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 01C3             }
; 0000 01C4         }
;PCODE: $0000042F VOL: 0
; 0000 01C5 
; 0000 01C6         if(millis() - lastmillis_value >= 500) { // Untuk membuat kursor '_' berkedip
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 1
;PCODE: $00000433 VOL: 1
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 01C7             lastmillis_value = millis();
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 1
; 0000 01C8             if(pos < 13) {
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 01C9                 if(blink) { lcd_gotoxy(pos,0); lcd_putchar(' '); }
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 01CA                 else { lcd_gotoxy(pos,0); lcd_putchar('_'); }
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 01CB                 blink = !blink;
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 01CC             }
; 0000 01CD         }
;PCODE: $00000451 VOL: 0
; 0000 01CE 
; 0000 01CF         buttonstate = startt;
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 01D0         if (buttonstate != lastbuttonstate) { // Jika yang ditekan tombol start, maka keluar dari loop
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 01D1             if (startt == ditekan) {
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 01D2                 pressed = true;
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 01D3             }
; 0000 01D4         }
;PCODE: $00000460 VOL: 0
; 0000 01D5         lastbuttonstate = buttonstate;
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 01D6     } while(pressed == false);
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 01D7     pressed = false;
;PCODE: $00000469 VOL: 0
; 0000 01D8     Ki = atof(Ki_Temp);
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01D9     lcd_clear();
;PCODE: $0000046D VOL: 0
; 0000 01DA     lcd_gotoxy(0,0); lcd_putsf("  Ki = ");
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01DB     lcd_gotoxy(8,0); sprintf(data, "%0.2f", Ki); lcd_puts(data);
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 01DC     lcd_gotoxy(8,1); lcd_puts(Ki_Temp);
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 01DD     memset(Ki_Temp, 0, sizeof(Ki_Temp));
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 01DE     delay_ms(2000);
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 01DF }
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0

	.DSEG
_0x5D:
	.BYTE 0x18
;
;/*Fungsi untuk kirim data via serial*/
;void UART_TxChar(char ch) {
; 0000 01E2 void UART_TxChar(char ch) {

	.CSEG
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 01E3 	while (! (UCSRA & (1<<UDRE)));	/* Menunggu buffer transmit kosong*/
;PCODE: $00000499 VOL: 0
;	ch -> Y+0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 01E4 	UDR = ch ;
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 01E5 }
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;
;void UART_SendString(char *str) {
; 0000 01E7 void UART_SendString(char *str) {
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 01E8 	unsigned char j=0;
; 0000 01E9 	while (str[j]!=0) { /*Kirim data*/
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;	*str -> Y+1
;	j -> R17
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 01EA 		UART_TxChar(str[j]);
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 01EB 		j++;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 01EC 	}
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 01ED }
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;
;/*Fungsi utama*/
;void main(void)
; 0000 01F1 {
;PCODE: $000004BE VOL: 0
; 0000 01F2 // Declare your local variables here
; 0000 01F3     unsigned char data[16];
; 0000 01F4     float ACSVal = 0;
; 0000 01F5 // Input/Output Ports initialization
; 0000 01F6 // Port A initialization
; 0000 01F7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01F8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01F9 //PORTA=0x00;
; 0000 01FA //DDRA=0x00;
; 0000 01FB 
; 0000 01FC // Input/Output Ports initialization
; 0000 01FD // Port A initialization
; 0000 01FE // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 01FF // State7=0 State6=0 State5=0 State4=0 State3=P State2=P State1=P State0=T
; 0000 0200 PORTA=0x0E;
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;	data -> Y+4
;	ACSVal -> Y+0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0201 DDRA=0xF0;
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 0202 
; 0000 0203 // Port B initialization
; 0000 0204 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0205 // State7=T State6=T State5=T State4=T State3=T State2=P State1=T State0=T
; 0000 0206 PORTB=0x04;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 0207 DDRB=0x00;
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 0208 
; 0000 0209 // Port C initialization
; 0000 020A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 020B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 020C PORTC=0x00;
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 020D DDRC=0x00;
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 020E 
; 0000 020F // Port D initialization
; 0000 0210 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 0211 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=P State1=P State0=P
; 0000 0212 PORTD=0x07;
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
; 0000 0213 DDRD=0xF8;
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 0214 
; 0000 0215 // Timer/Counter 0 initialization
; 0000 0216 // Clock source: System Clock
; 0000 0217 // Clock value: 172.800 kHz
; 0000 0218 // Mode: CTC top=OCR0
; 0000 0219 // OC0 output: Disconnected
; 0000 021A TCCR0=0x0B;
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 021B TCNT0=0x00;
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 021C OCR0=0xAC;
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 021D 
; 0000 021E // Timer/Counter 1 initialization
; 0000 021F // Clock source: System Clock
; 0000 0220 // Clock value: Timer1 Stopped
; 0000 0221 // Mode: Normal top=0xFFFF
; 0000 0222 // OC1A output: Discon.
; 0000 0223 // OC1B output: Discon.
; 0000 0224 // Noise Canceler: Off
; 0000 0225 // Input Capture on Falling Edge
; 0000 0226 // Timer1 Overflow Interrupt: Off
; 0000 0227 // Input Capture Interrupt: Off
; 0000 0228 // Compare A Match Interrupt: Off
; 0000 0229 // Compare B Match Interrupt: Off
; 0000 022A TCCR1A=0x00;
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 022B TCCR1B=0x00;
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 022C TCNT1H=0x00;
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 022D TCNT1L=0x00;
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
; 0000 022E ICR1H=0x00;
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 022F ICR1L=0x00;
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 0230 OCR1AH=0x00;
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
; 0000 0231 OCR1AL=0x00;
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0000 0232 OCR1BH=0x00;
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 0233 OCR1BL=0x00;
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0234 
; 0000 0235 // Timer/Counter 2 initialization
; 0000 0236 // Clock source: System Clock
; 0000 0237 // Clock value: 11059.200 kHz
; 0000 0238 // Mode: Fast PWM top=0xFF
; 0000 0239 // OC2 output: Non-Inverted PWM
; 0000 023A ASSR=0x00;
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 023B TCCR2=0x69;
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0000 023C TCNT2=0x00;
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 023D OCR2=0x00;
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 023E 
; 0000 023F // External Interrupt(s) initialization
; 0000 0240 // INT0: Off
; 0000 0241 // INT1: Off
; 0000 0242 // INT2: On
; 0000 0243 // INT2 Mode: Rising Edge
; 0000 0244 GICR|=0x20;
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 0245 MCUCR=0x00;
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 0246 MCUCSR=0x40;
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0247 GIFR=0x20;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 0248 
; 0000 0249 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 024A TIMSK=0x02;
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 024B 
; 0000 024C // USART initialization
; 0000 024D // USART disabled
; 0000 024E //UCSRB=0x00;
; 0000 024F 
; 0000 0250 // USART initialization
; 0000 0251 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0252 // USART Receiver: Off
; 0000 0253 // USART Transmitter: On
; 0000 0254 // USART Mode: Asynchronous
; 0000 0255 // USART Baud Rate: 9600
; 0000 0256 UCSRA=0x00;
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0000 0257 UCSRB=0x08;
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 0258 UCSRC=0x86;
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 0259 UBRRH=0x00;
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0000 025A UBRRL=0x47;
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 025B 
; 0000 025C // Analog Comparator initialization
; 0000 025D // Analog Comparator: Off
; 0000 025E // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 025F ACSR=0x80;
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0000 0260 SFIOR=0x00;
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
; 0000 0261 
; 0000 0262 // ADC initialization
; 0000 0263 // ADC Clock frequency: 691.200 kHz
; 0000 0264 // ADC Voltage Reference: AREF pin
; 0000 0265 // ADC Auto Trigger Source: ADC Stopped
; 0000 0266 // Only the 8 most significant bits of
; 0000 0267 // the AD conversion result are used
; 0000 0268 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 0269 ADCSRA=0x84;
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
; 0000 026A 
; 0000 026B // SPI initialization
; 0000 026C // SPI disabled
; 0000 026D SPCR=0x00;
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0000 026E 
; 0000 026F // TWI initialization
; 0000 0270 // TWI disabled
; 0000 0271 TWCR=0x00;
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 0272 
; 0000 0273 /* Enable global interrupt */
; 0000 0274     #asm("sei")
;PCODE: $0000051B VOL: 0
	sei
;PCODE: $0000051C VOL: 0
; 0000 0275 
; 0000 0276 // Alphanumeric LCD initialization
; 0000 0277 // Connections are specified in the
; 0000 0278 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0279 // RS - PORTC Bit 0
; 0000 027A // RD - PORTC Bit 1
; 0000 027B // EN - PORTC Bit 2
; 0000 027C // D4 - PORTC Bit 4
; 0000 027D // D5 - PORTC Bit 5
; 0000 027E // D6 - PORTC Bit 6
; 0000 027F // D7 - PORTC Bit 7
; 0000 0280 // Characters/line: 16
; 0000 0281 lcd_init(16);
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 0282 lcd_gotoxy(0,0); lcd_putsf("  SOFT STARTER  ");
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0000 0283 lcd_gotoxy(0,1); lcd_putsf("  MOTOR 1 FASA  ");
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
; 0000 0284 delay_ms(2000);
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0000 0285 calibrate();
;PCODE: $0000052F VOL: 0
; 0000 0286 lcd_clear();
;PCODE: $00000530 VOL: 0
; 0000 0287 countpwm = 200;
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 0288 lcd_clear();
;PCODE: $00000533 VOL: 0
; 0000 0289 lcd_gotoxy(0,0); lcd_puts("ARUS : ");
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 028A lcd_gotoxy(0,1); lcd_puts("PWM  : ");
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 028B while (1)
;PCODE: $00000542 VOL: 0
; 0000 028C       {
; 0000 028D       // Place your code here
; 0000 028E           Cek_Interrupt(); // Memanggil fungsi Cek_Interrupt()
;PCODE: $00000543 VOL: 0
; 0000 028F           if(millis() - lastmillis_value >= 1000) { // Update LCD, kirim data serial dan Fungsi PIControl() setiap 1 detik
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 1
;PCODE: $00000546 VOL: 1
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 0290             lastmillis_value = millis();
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 1
; 0000 0291             if(countpwm >= 250) count++;
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0000 0292             else countpwm = countpwm + 10;
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 0293             //OCR2 = countpwm;
; 0000 0294             ACSVal = readACS();
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 0295             if(count > 3 ) { countpwm = 0; count = 0; }
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 0000 0296             lcd_gotoxy(7,0); lcd_puts("        "); lcd_gotoxy(7,1); lcd_puts("        ");
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 0297             lcd_gotoxy(7,0); sprintf(data, "%d", ACSVal); lcd_puts(data);
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
; 0000 0298             lcd_gotoxy(7,1); sprintf(data, "%d", countpwm); lcd_puts(data);
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
; 0000 0299             sprintf(data, "Sens ACS %0.1f|PWM %d", ACSVal, countpwm); UART_SendString(data); UART_SendString("\r\n"); // Kirim data via serial untuk monitoring
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 029A           }
; 0000 029B       }
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 029C }
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0

	.DSEG
_0x92:
	.BYTE 0x25
